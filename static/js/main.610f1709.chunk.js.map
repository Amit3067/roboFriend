{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchField.js","components/Scroll.js","containers/App.js","actions.js","constants.js","serviceWorker.js","reducers.js","index.js"],"names":["Card","name","email","id","className","src","alt","CardList","robots","cardComponent","map","user","i","key","SearchField","searchChange","type","placeholder","onChange","width","Scroll","props","style","border","overflowY","height","children","App","this","onRequestRobots","searchField","onSearchChange","filteredRobots","isPending","filter","toLowerCase","includes","length","Component","connect","state","searchRobots","requestRobots","error","dispatch","event","payload","target","value","fetch","then","response","json","users","catch","Boolean","window","location","hostname","match","initialStateSearch","initialStateRobots","logger","createLogger","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.610f1709.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nfunction Card({name,email,id}){\r\n    return (\r\n        <div className=\"bg-light-blue dib br3 pa3 ma2 grow bw2 shadow-5\">\r\n            <img src={`https://robohash.org/${id}?200x200`} alt=\"Robot\">\r\n            </img>\r\n            <div>\r\n                <h1>{name}</h1>\r\n                <h3>{email}</h3> \r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList=({robots})=>{\r\n    const cardComponent=robots.map((user,i)=>{\r\n        return <Card key={robots[i].id} name={robots[i].name} id={robots[i].id} email={robots[i].email}/>\r\n    });\r\n    return (\r\n        <div>\r\n            {cardComponent}\r\n        </div>\r\n    );\r\n}\r\nexport default CardList; ","import React from 'react';\r\n\r\nexport default function SearchField({searchChange}){\r\n    return (\r\n        <div>\r\n            <h1 className=\"blue lego f1\">RoboFriends</h1>\r\n            <input type=\"search\" placeholder=\"Search robots...\" onChange={searchChange} className=\"bg-lightest-blue pa3 br3 shadow-3 b--light-blueblue\"></input>\r\n            <hr width=\"100%\" className=\"light-blue\"></hr>\r\n        </div>\r\n    );\r\n}","import React from 'react';\r\n\r\nconst Scroll=(props)=>{\r\n    return (\r\n        <div style={{border:'solid 2px black',overflowY:'scroll',height:'70vh' }}>\r\n            {props.children}\r\n        </div>\r\n    );\r\n};\r\nexport default Scroll;","import React,{Component} from 'react';\r\nimport {connect} from 'react-redux';\r\nimport CardList from '../components/CardList'\r\nimport SearchField from '../components/SearchField';\r\nimport Scroll from '../components/Scroll';\r\nimport {setSearchField,requestRobots} from '../actions.js'\r\n\r\nconst mapStateToProps=(state)=>{\r\n    return ({\r\n        searchField: state.searchRobots.searchField,\r\n        robots: state.requestRobots.robots,\r\n        isPending: state.requestRobots.isPending,\r\n        error: state.requestRobots.error\r\n    });\r\n}\r\n\r\nconst mapDispatchToProps=(dispatch)=>{\r\n    return {\r\n    onSearchChange: (event)=>{\r\n        return dispatch(setSearchField(event.target.value))},\r\n    onRequestRobots: ()=>requestRobots(dispatch)\r\n}};\r\n\r\nclass App extends Component{\r\n    componentDidMount() {\r\n        this.props.onRequestRobots();\r\n    }    \r\n    render() {\r\n        const {searchField,onSearchChange,robots,isPending}=this.props;\r\n        const filteredRobots= robots.filter((robots)=>{\r\n            return robots.name.toLowerCase().includes(searchField.toLowerCase());\r\n        });\r\n        return !robots.length?<h1>Loading</h1>:(\r\n            <div className=\"tc\">\r\n                <SearchField searchChange={onSearchChange}/>\r\n                <Scroll >\r\n                    <CardList robots={filteredRobots}/>\r\n                </Scroll>\r\n            </div>\r\n        );\r\n    }\r\n}\r\nexport default connect(mapStateToProps,mapDispatchToProps)(App);","import {CHANGE_SEARCH_FIELD,\r\n        REQUEST_ROBOTS_SUCCESS,\r\n        REQUEST_ROBOTS_FAILED,\r\n        REQUEST_ROBOTS_PENDING} from './constants.js';\r\n\r\nexport const setSearchField=(text)=>({\r\n        type:CHANGE_SEARCH_FIELD,\r\n        payload:text\r\n});\r\n\r\nexport const requestRobots=(dispatch)=>{\r\n        dispatch({type:REQUEST_ROBOTS_PENDING});\r\n        fetch('https://jsonplaceholder.typicode.com/users')\r\n        .then(response=>response.json())\r\n        .then(users=>dispatch({type: REQUEST_ROBOTS_SUCCESS,payload:users}))\r\n        .catch(error=>dispatch({type: REQUEST_ROBOTS_FAILED,payload:error}));\r\n}","export const CHANGE_SEARCH_FIELD=\"CHANGE_SEARCH_FIELD\";\r\nexport const REQUEST_ROBOTS_PENDING=\"REQUEST_ROBOT_PENDING\";\r\nexport const REQUEST_ROBOTS_SUCCESS=\"REQUEST_ROBOT_SUCCESS\";\r\nexport const REQUEST_ROBOTS_FAILED=\"REQUEST_ROBOT_FAILED\";","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import {CHANGE_SEARCH_FIELD,\r\n    REQUEST_ROBOTS_SUCCESS,\r\n    REQUEST_ROBOTS_FAILED,\r\n    REQUEST_ROBOTS_PENDING} from './constants.js';\r\n\r\nconst initialStateSearch={\r\n    searchField: ''\r\n};\r\n\r\nexport const searchRobots=(state=initialStateSearch,action={})=>{\r\n    switch(action.type){\r\n        case CHANGE_SEARCH_FIELD:\r\n            return Object.assign({}, state, {searchField: action.payload});\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nconst initialStateRobots={\r\n    isPending: false,\r\n    robots: [],\r\n    error:''\r\n};\r\n\r\nexport const requestRobots=(state=initialStateRobots,action={})=>{\r\n    switch(action.type){\r\n        case REQUEST_ROBOTS_PENDING:\r\n            return Object.assign({}, state, {isPending: true});\r\n        case REQUEST_ROBOTS_SUCCESS:\r\n            return Object.assign({},state,{robots: action.payload,isPending: false});\r\n        case REQUEST_ROBOTS_FAILED:\r\n            return Object.assign({},state,{error: action.payload,isPending: false});\r\n        default:\r\n            return state;\r\n    }\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport {createLogger} from 'redux-logger';\r\nimport App from './containers/App';\r\nimport thunkMiddleware from 'redux-thunk';\r\nimport {Provider,connect} from 'react-redux';\r\nimport {createStore,applyMiddleware,combineReducers} from 'redux';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'tachyons';\r\nimport { searchRobots, requestRobots } from './reducers';\r\n\r\nconst logger=createLogger();\r\nconst rootReducer=combineReducers({searchRobots,requestRobots});\r\nconst store=createStore(rootReducer,applyMiddleware(thunkMiddleware,logger));\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}